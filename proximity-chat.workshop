import 'workshop-island-settings.json';

globalvar Number m_LogIndex = 1;
globalvar Number m_GameId;

globalvar Boolean m_GameRunning = false;
playervar String p_PlayerCode;
playervar Number p_SpectatingSlot;
playervar Boolean p_CanStartSpeccing;
playervar Boolean p_CanSwapSpectatorPOV;
globalvar Boolean m_Team1Ready;
globalvar String m_Team1ReadyText;
globalvar Color m_Team1ReadyColor = Color.Red;
globalvar Number m_Team1ReadyTextID;
globalvar Boolean m_Team2Ready;
globalvar String m_Team2ReadyText;
globalvar Color m_Team2ReadyColor = Color.Red;
globalvar Number m_Team2ReadyTextID;

globalvar Number m_ReadyClients = 0;
globalvar String m_ClientsReadyText;
globalvar Number m_ReadyClientsID;

globalvar String[] m_ValidCodeCharacters = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9"
];

globalvar Number[] m_Team1OccupiedSlots = [];
globalvar Number[] m_Team2OccupiedSlots = [];
globalvar Player[] m_Team1SpawnedSlots = [];
globalvar Player[] m_Team2SpawnedSlots = [];

globalvar Number f_NowEmptySlot = -1;
globalvar Number f_I = -1;

rule: "LOGGING: Setup"
Event.OngoingGlobal
{
    m_GameId = RandomInteger(1000, 9999);
    // Todo include settings
    Log("start", "{\"mapName\": \"" + CurrentMap() + "\", \"gameId\": \"" + m_GameId + "\"}");
}

rule: "LOGGING: Game Start"
Event.OngoingGlobal
if (IsGameInProgress() && MatchRound() == 1)
{
    Log("start-round", ""); 
}

rule: "LOGGING: Player Quit"
Event.OnPlayerLeave
{
    f_NowEmptySlot = -1;

    for (f_I = 0; f_I < 5; f_I++)
    {
        if (PlayersInSlot(f_I, Team.Team1) == null && m_Team1OccupiedSlots.Contains(f_I))
        {
            f_NowEmptySlot = f_I;
            m_Team1OccupiedSlots.ModRemoveByValue(f_I);
        }
        else if (PlayersInSlot(f_I, Team.Team2) == null && m_Team2OccupiedSlots.Contains(f_I))
        {
            f_NowEmptySlot = f_I + 5;
            m_Team2OccupiedSlots.ModRemoveByValue(f_I);
        }

        if (m_Team1SpawnedSlots[f_I] != null && !EntityExists(m_Team1SpawnedSlots[f_I]))
        {
            m_Team1SpawnedSlots.ModRemoveByIndex(f_I);
        }

        if (m_Team2SpawnedSlots[f_I] != null && !EntityExists(m_Team2SpawnedSlots[f_I]))
        {
            m_Team2SpawnedSlots.ModRemoveByIndex(f_I);
        }
    }

    Log("remove-player", "{\"slot\": " + f_NowEmptySlot + "}");
}

rule: "LOGGING: Tick"
Event.OngoingGlobal
{
    while (true)
    {
        define combinedString = "";
        foreach (define player in AllPlayers())
        {
            if (!HasSpawned(player))
            {
                continue;
            }

            define positionToUse = EyePosition(player);
            define facingToUse = Normalize(FacingDirectionOf(player)) * -1;

            if (player.p_SpectatingSlot != -1)
            {
                positionToUse = EyePosition(PlayersInSlot(player.p_SpectatingSlot, TeamOf(player)));
                facingToUse = Normalize(FacingDirectionOf(PlayersInSlot(player.p_SpectatingSlot, TeamOf(player)))) * -1;
            }
            
            if (positionToUse != 0 && facingToUse != 0)
            {
                combinedString = combinedString + (SlotOf(player) + (TeamOf(player) == Team.Team2 ? 5 : 0)) + "@" + positionToUse + "@" + facingToUse;

                if (LastOf(AllPlayers()) != player)
                {
                    combinedString = combinedString + "!";
                }
            }
        }

        if (combinedString != "")
        {
            Log("pos", combinedString);
        }

        MinWait();
    }
}

rule: "LOGGING: Player Die"
Event.OngoingPlayer
if (!IsAlive(EventPlayer()))
{
    Log("player-died", "{\"slot\": "+ (TeamOf(EventPlayer()) == Team.Team1 ? SlotOf(EventPlayer()) : SlotOf(EventPlayer()) + 5) + "}");
}

rule: "LOGGING: Player Spawn"
Event.OngoingPlayer
if (IsAlive(EventPlayer()))
{
    Log("player-spawn", "{\"slot\": "+ (TeamOf(EventPlayer()) == Team.Team1 ? SlotOf(EventPlayer()) : SlotOf(EventPlayer()) + 5) + "}");
}

rule: "LOGGING: End of game"
Event.OngoingGlobal
if (IsMatchComplete())
{
    Log("end", "");
}

/*
rule: "DEBUG: Create Dummy Bots"
Event.OngoingGlobal
{
    Wait(5);
    for (define i = 0; i < 4; i++)
    {
        Player dummy = CreateDummyBot(Hero.Ana, Team.Team1, -1, Vector(i * 2, 1, 0));
        StartForcingDummyBotName(dummy, "" + i);
        Wait(2);
    }
} */

rule: "PLAYER: Player Join"
Event.OnPlayerJoin
{
    p_PlayerCode = "";

    for (define i = 0; i < 5; i++)
    {
        p_PlayerCode = p_PlayerCode + m_ValidCodeCharacters[RandomInteger(0, CountOf(m_ValidCodeCharacters))];
    }

    CreateHudText(EventPlayer(), null ,null, p_PlayerCode, Location.Left, 0, null, null, Color.White, HudTextRev.VisibleToAndString, Spectators.VisibleNever);

    define slot = SlotOf(EventPlayer());

    if (TeamOf(EventPlayer()) == Team.Team2)
    {
        slot += 5;
    }

    Log("add-player", "{\"slot\": " + slot + ", \"name\": \"" + EventPlayer() + "\", \"linkCode\": \"" + p_PlayerCode + "\" }");
    if (TeamOf(EventPlayer()) == Team.Team1)
    {
        m_Team1OccupiedSlots.ModAppend(slot);
    }
    else
    {
        m_Team2OccupiedSlots.ModAppend(slot);
    }
}

rule: "SPECTATING: Player Death"
Event.OnDeath
{
    Wait(2);
    p_CanStartSpeccing = true;
    Wait(1);
    p_CanSwapSpectatorPOV = true;
}

rule: "SPECTATING: Spec Instantly"
Event.OngoingPlayer
if (!IsAlive(EventPlayer()) && p_CanStartSpeccing && IsButtonHeld(EventPlayer(), Button.Jump))
{
    p_CanSwapSpectatorPOV = true;
}

rule: "SPECTATING: Set Spec Slot"
Event.OngoingPlayer
if (p_CanSwapSpectatorPOV)
{
    define selectedArray = TeamOf(EventPlayer()) == Team.Team1 ? m_Team1SpawnedSlots : m_Team2SpawnedSlots;
    foreach (define player in selectedArray)
    {
        if (HasSpawned(player) && IsAlive(player))
        {
            p_SpectatingSlot = SlotOf(player) + (TeamOf(player) == Team.Team2 ? 5 : 0);
            break;
        }
    }
}

rule: "SPECTATING: Swap Spec Slots Inc"
Event.OngoingPlayer
if (!IsAlive(EventPlayer()) && p_CanSwapSpectatorPOV && IsButtonHeld(EventPlayer(), Button.SecondaryFire))
{
    define slot = p_SpectatingSlot;
    for (define i = 1; i < 5; i++)
    {
        if (slot == 4)
        {
            slot = 0;
        }
        else if (slot == 9)
        {
            slot = 5;
        }
        else
        {
            slot++;
        }

        Player player = PlayersInSlot(slot, TeamOf(EventPlayer()));
        if (HasSpawned(player) && IsAlive(player))
        {
            p_SpectatingSlot = slot;
            break;
        }
    }
}

rule: "SPECTATING: Swap Spec Slots Dec"
Event.OngoingPlayer
if (!IsAlive(EventPlayer()) && p_CanSwapSpectatorPOV && IsButtonHeld(EventPlayer(), Button.PrimaryFire))
{
    define slot = p_SpectatingSlot;
    for (define i = 1; i < 5; i++)
    {
        if (slot == 0)
        {
            slot = 4;
        }
        else if (slot == 5)
        {
            slot = 9;
        }
        else
        {
            slot--;
        }

        Player player = PlayersInSlot(slot, TeamOf(EventPlayer()));
        if (HasSpawned(player) && IsAlive(player))
        {
            p_SpectatingSlot = slot;
            break;
        }
    }
}

rule: "SPECTATING: Track player first spawns"
Event.OngoingPlayer
if (HasSpawned(EventPlayer()))
{
    if (TeamOf(EventPlayer()) == Team.Team1)
    {
        m_Team1SpawnedSlots = Append(EventPlayer(), m_Team1SpawnedSlots);
    }
    else
    {
        m_Team2SpawnedSlots = Append(EventPlayer(), m_Team2SpawnedSlots);
    }    
}

rule: "PLAYER: Spawn"
Event.OngoingPlayer
if (IsAlive(EventPlayer()))
{
    p_SpectatingSlot = -1;
    p_CanSwapSpectatorPOV = false;
    p_CanStartSpeccing = false;
}

rule: "GAME: Skip assemble heroes"
Event.OngoingGlobal
if (IsAssemblingHeroes())
{
    SetMatchTime(0);
}

rule: "GAME: Pause pregame timer"
if (IsInSetup())
{
    m_Team1ReadyText = $"{Team.Team1}: Not Ready";
    m_Team2ReadyText = $"{Team.Team2}: Not Ready";
    m_ClientsReadyText = "Ready: " + m_ReadyClients + "/" + NumberOfSlots();
    m_Team1ReadyTextID = CreateHudText(AllPlayers(), null, null, m_Team1ReadyText, Location.Right, 20, null, null, m_Team1ReadyColor, HudTextRev.VisibleToStringAndColor, Spectators.DefaultVisibility);
    m_Team2ReadyTextID = CreateHudText(AllPlayers(), null, null, m_Team2ReadyText, Location.Right, 20, null, null, m_Team2ReadyColor, HudTextRev.VisibleToStringAndColor, Spectators.DefaultVisibility);
    m_ReadyClientsID = CreateHudText(AllPlayers(), null, null, m_ClientsReadyText, Location.Right, 20, null, null, Color.White, HudTextRev.VisibleToStringAndColor, Spectators.DefaultVisibility);
}

rule: "GAME: Ready Team 1"
Team.Team1
Event.OngoingPlayer
if (IsInSetup() && IsButtonHeld(EventPlayer(), Button.Crouch) && IsButtonHeld(EventPlayer(), Button.Interact))
{
    m_Team1Ready = !m_Team1Ready;
    m_Team1ReadyText = m_Team1Ready ? $"{Team.Team1}: Ready" : $"{Team.Team1}: Not Ready";
    m_Team1ReadyColor = m_Team1Ready ? Color.Green : Color.Red;

    if (m_Team1Ready)
    {
        SmallMessage(AllPlayers(), $"{EventPlayer()} readied their team");
    }
    else
    {
        SmallMessage(AllPlayers(), $"{EventPlayer()} unreadied their team");
    }
}

rule: "GAME: Ready Team 2"
Team.Team2
Event.OngoingPlayer
if (IsInSetup() && IsButtonHeld(EventPlayer(), Button.Crouch) && IsButtonHeld(EventPlayer(), Button.Interact))
{
    m_Team2Ready = !m_Team2Ready;
    m_Team2ReadyText = m_Team2Ready ? $"{Team.Team2}: Ready" : $"{Team.Team2}: Not Ready";
    m_Team2ReadyColor = m_Team2Ready ? Color.Green : Color.Red;
    
    if (m_Team2Ready)
    {
        SmallMessage(AllPlayers(), $"{EventPlayer()} readied their team");
    }
    else
    {
        SmallMessage(AllPlayers(), $"{EventPlayer()} unreadied their team");
    }
}

rule: "GAME: All players ready"
Event.OngoingGlobal
if (IsInSetup() && m_Team1Ready && m_Team2Ready && m_ReadyClients == NumberOfSlots())
{
    SetMatchTime(6);
    UnpauseMatchTime();
}

rule: "GAME: Cleanup Ready Text"
Event.OngoingGlobal
if (IsGameInProgress())
{
    DestroyHudText(m_Team1ReadyTextID);
    DestroyHudText(m_Team2ReadyTextID);
    DestroyHudText(m_ReadyClientsID);
    m_Team1Ready = false;
    m_Team2Ready = false;
    m_Team1ReadyColor = Color.Red;
    m_Team2ReadyColor = Color.Red;
}

rule: "GAME: Reset Timer if Unready"
Event.OngoingGlobal
if (IsInSetup() && (!m_Team1Ready || !m_Team2Ready || m_ReadyClients != NumberOfSlots()))
{
    SetMatchTime(46);
    Wait(0.9);
    PauseMatchTime();
} 

rule: "GAME: Increase player ready count"
Event.OngoingGlobal
if (IsButtonHeld(HostPlayer(), Button.Ability1))
{
    if (m_ReadyClients <= NumberOfSlots() - 1)
    {
        m_ReadyClients++;
    }

    m_ClientsReadyText = "Ready: " + m_ReadyClients + "/" + NumberOfSlots();
}

rule: "GAME: Decrease player ready count"
Event.OngoingGlobal
if (IsButtonHeld(HostPlayer(), Button.Interact))
{
    if (m_ReadyClients >= 1)
    {
        m_ReadyClients--;
    }
    
    m_ClientsReadyText = "Ready: " + m_ReadyClients + "/" + NumberOfSlots();
}

void Log(String type, String value) globalvar "Log"
{
    EnableInspectorRecording();
    LogToInspector($"{type}|{value}");
    DisableInspectorRecording();
}